name: CI

on: [push]

jobs:

  build:
    name: Run Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v1

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1  

    - name : Generate EF Migrations on ${{ matrix.os }}
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet tool install --global dotnet-ef --version 3.0.0        
        PATH=$PATH:/home/runner/.dotnet/tools
        cd src/Skoruba.IdentityServer4.Admin
        dotnet restore
        dotnet ef
        dotnet ef migrations add AspNetIdentityDbInit -c AdminIdentityDbContext -o Data/Migrations/Identity
        dotnet ef migrations add LoggingDbInit -c AdminLogDbContext -o Data/Migrations/Logging
        dotnet ef migrations add IdentityServerConfigurationDbInit -c IdentityServerConfigurationDbContext -o Data/Migrations/IdentityServerConfiguration
        dotnet ef migrations add IdentityServerPersistedGrantsDbInit -c IdentityServerPersistedGrantDbContext -o Data/Migrations/IdentityServerGrants
        dotnet ef migrations add AuditLoggingDbInit -c AdminAuditLogDbContext -o Data/Migrations/AdminAuditLogging

    - name: Build .NET solution
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      run: |
        dotnet --version
        dotnet build ./Skoruba.IdentityServer4.Admin.sln --configuration Release
        
    - name: Test .NET solution
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      run: |
        dotnet --version
        dotnet test ./Skoruba.IdentityServer4.Admin.sln --configuration Release
   
    - name: Publish Docker Image to GPR
      uses: machine-learning-apps/gpr-docker-publish@master
      if: matrix.os == 'ubuntu-latest'
      id: docker-skoruba.identityserver4.admin
      with:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        IMAGE_NAME: 'bravecobra/identityserver4.admin/skoruba.identityserver4.admin'
        DOCKERFILE_PATH: 'src/Skoruba.IdentityServer4.Admin/Dockerfile'
        BUILD_CONTEXT: '.'
        
    - name: Publish Docker Image to GPR
      uses: machine-learning-apps/gpr-docker-publish@master
      if: matrix.os == 'ubuntu-latest'
      id: docker-skoruba.identityserver4.admin.api
      with:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        IMAGE_NAME: 'bravecobra/identityserver4.admin/skoruba.identityserver4.admin.api'
        DOCKERFILE_PATH: 'src/Skoruba.IdentityServer4.Admin.Api/Dockerfile'
        BUILD_CONTEXT: '.'          

    - name: Publish Docker Image to GPR
      uses: machine-learning-apps/gpr-docker-publish@master
      if: matrix.os == 'ubuntu-latest'
      id: docker
      with:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        IMAGE_NAME: 'bravecobra/identityserver4.admin/skoruba.identityserver4.sts.identity'
        DOCKERFILE_PATH: 'src/Skoruba.IdentityServer4.STS.Identity/Dockerfile'
        BUILD_CONTEXT: '.'

    - name: Validate docker-compose-ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        docker --version
        docker-compose --version
        docker-compose config

    - name: Validate docker-compose-windows
      if: matrix.os == 'windows-latest'
      run: |
        docker --version
        docker-compose --version
        docker-compose config       
